import json
import logging
import datetime
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename="bot_actions.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    encoding='utf-8'
)

# === –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ —Ñ–∞–∫—Ç–∞–º–∏ ===
class HistoricalFacts:
    def __init__(self, language='ru'):
        self.language = language
        self.facts = self.load_facts()
        self.saved_facts = {}

    def load_facts(self):
        try:
            with open(f'facts_{self.language}.json', 'r', encoding='utf-8') as file:
                return json.load(file)
        except FileNotFoundError:
            print("–§–∞–π–ª —Å —Ñ–∞–∫—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return {}

    def save_facts(self):
        with open(f'facts_{self.language}.json', 'w', encoding='utf-8') as file:
            json.dump(self.facts, file, ensure_ascii=False, indent=4)

    def get_facts_for_date(self, month_day, category=None):
        facts_for_date = self.facts.get(month_day, [])
        if category:
            return [fact for fact in facts_for_date if fact.get('category') == category]
        return facts_for_date

    def save_favorite_fact(self, user_id, fact):
        if user_id not in self.saved_facts:
            self.saved_facts[user_id] = []
        self.saved_facts[user_id].append(fact)

    def get_favorite_facts(self, user_id):
        return self.saved_facts.get(user_id, [])

# === Telegram-–±–æ—Ç ===
class HistoryBot(HistoricalFacts):
    def __init__(self, token, language='ru'):
        super().__init__(language)
        self.app = Application.builder().token(token).build()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start")
        keyboard = [
            [InlineKeyboardButton("–§–∞–∫—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data='facts_today')],
            [InlineKeyboardButton("–ü–æ–∏—Å–∫ —Ñ–∞–∫—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data='search_category')],
            [InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã", callback_data='saved_facts')],
            [InlineKeyboardButton("–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç", callback_data='random_fact')],
            [InlineKeyboardButton("–ò–≥—Ä—ã", callback_data='games')],
            [InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data='change_language')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup
        )

    async def handle_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É {query.data}")
        await query.answer()

        if query.data == 'facts_today':
            today = datetime.date.today()
            month_day = f"{today.month:02d}-{today.day:02d}"
            facts = self.get_facts_for_date(month_day)
            if facts:
                message = "\n".join([f"- {fact['text']} ({fact['category']})" for fact in facts])
                await query.edit_message_text(f"–°–µ–≥–æ–¥–Ω—è –≤ –∏—Å—Ç–æ—Ä–∏–∏:\n{message}")
            else:
                await query.edit_message_text("–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ñ–∞–∫—Ç–æ–≤ –Ω–µ—Ç.")

        elif query.data == 'search_category':
            keyboard = [
                [InlineKeyboardButton("–ù–∞—É–∫–∞", callback_data='category_science')],
                [InlineKeyboardButton("–ö—É–ª—å—Ç—É—Ä–∞", callback_data='category_culture')],
                [InlineKeyboardButton("–ü–æ–ª–∏—Ç–∏–∫–∞", callback_data='category_politics')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)

        elif query.data.startswith('category_'):
            category = query.data.split('_')[1]
            today = datetime.date.today()
            month_day = f"{today.month:02d}-{today.day:02d}"
            facts = self.get_facts_for_date(month_day, category=category)
            if facts:
                message = "\n".join([f"- {fact['text']}" for fact in facts])
                await query.edit_message_text(f"–§–∞–∫—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':\n{message}")
            else:
                await query.edit_message_text(f"–§–∞–∫—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ—Ç.")

        elif query.data == 'random_fact':
            all_facts = [fact for facts in self.facts.values() for fact in facts]
            if all_facts:
                random_fact = random.choice(all_facts)
                context.user_data['fact_to_save'] = random_fact
                keyboard = [
                    [InlineKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–∫—Ç", callback_data='save_fact')],
                    [InlineKeyboardButton("–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å", callback_data='dismiss_fact')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    f"–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç:\n{random_fact['text']} ({random_fact['category']})",
                    reply_markup=reply_markup
                )
            else:
                await query.edit_message_text("–§–∞–∫—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")

        elif query.data == 'save_fact':
            fact_to_save = context.user_data.get('fact_to_save')
            if fact_to_save:
                user_id = query.from_user.id
                self.save_favorite_fact(user_id, fact_to_save['text'])
                await query.edit_message_text("–§–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
            else:
                await query.edit_message_text("–û—à–∏–±–∫–∞: –ù–µ—Ç —Ñ–∞–∫—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")

        elif query.data == 'dismiss_fact':
            await query.edit_message_text("–§–∞–∫—Ç –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")

        elif query.data == 'saved_facts':
            user_id = query.from_user.id
            saved = self.get_favorite_facts(user_id)
            if saved:
                message = "\n".join([f"{idx+1}. {fact}" for idx, fact in enumerate(saved)])
                message += "\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å."
                await query.edit_message_text(f"–í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã:\n{message}")
                context.user_data['awaiting_fact_number'] = True
            else:
                await query.edit_message_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤.")

        elif query.data == 'games':
            keyboard = [[InlineKeyboardButton("–£–≥–∞–¥–∞–π –≥–æ–¥", callback_data='game_guess_year')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=reply_markup)

        elif query.data == 'game_guess_year':
            fact = random.choice([fact for facts in self.facts.values() for fact in facts])
            fact_text = fact['text']
            correct_year = fact_text.split(' ‚Äî ')[0].strip()
            fact_without_year = fact_text.split(' ‚Äî ', 1)[1].strip()  # –£–±–∏—Ä–∞–µ–º –≥–æ–¥ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ñ–∞–∫—Ç–∞
            context.user_data['game_fact'] = fact
            context.user_data['correct_year'] = correct_year
            await query.edit_message_text(
                f"–ò–≥—Ä–∞ '–£–≥–∞–¥–∞–π –≥–æ–¥':\n{fact_without_year}\n\n–í –∫–∞–∫–æ–º –≥–æ–¥—É –ø—Ä–æ–∏–∑–æ—à–ª–æ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ?"
            )

        elif query.data == 'change_language':
            keyboard = [
                [InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data='set_language_ru')],
                [InlineKeyboardButton("English", callback_data='set_language_en')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=reply_markup)

        elif query.data.startswith('set_language_'):
            new_language = query.data.split('_')[-1]
            if new_language in ['ru', 'en']:
                self.language = new_language
                self.facts = self.load_facts()
                await query.edit_message_text(f"–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {'–†—É—Å—Å–∫–∏–π' if new_language == 'ru' else 'English'}.")
            else:
                await query.edit_message_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —è–∑—ã–∫–∞.")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.message.from_user.id
        text = update.message.text.strip()
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")

        if 'game_fact' in context.user_data and 'correct_year' in context.user_data:
            correct_year = context.user_data['correct_year']
            if text.isdigit():
                if text == correct_year:
                    await update.message.reply_text("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ")
                    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–≥–∞–¥–∞–ª –≥–æ–¥ {correct_year}.")
                else:
                    await update.message.reply_text(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_year}.")
                    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—à–∏–±—Å—è. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥–æ–¥: {correct_year}.")
                del context.user_data['game_fact']
                del context.user_data['correct_year']
            else:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")

        elif context.user_data.get('awaiting_fact_number'):
            saved_facts = self.get_favorite_facts(user_id)
            if text.isdigit():
                fact_index = int(text) - 1
                if 0 <= fact_index < len(saved_facts):
                    deleted_fact = saved_facts.pop(fact_index)
                    await update.message.reply_text(f"–§–∞–∫—Ç —É–¥–∞–ª—ë–Ω: {deleted_fact}")
                    self.saved_facts[user_id] = saved_facts
                else:
                    await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–∫—Ç–∞.")
            else:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–∫—Ç–∞.")
            context.user_data['awaiting_fact_number'] = False

        else:
            await update.message.reply_text("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é.")

    def run(self):
        logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(CallbackQueryHandler(self.handle_button))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.app.run_polling()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    token = "7921916797:AAGE3aSbTh4AX8biwZTjnu8D17PgtYrP-9M"
    bot = HistoryBot(token=token)
    bot.run()
